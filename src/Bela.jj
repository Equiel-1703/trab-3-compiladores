PARSER_BEGIN(Bela)

import java.io.*;
public class Bela {

  public static void main(String args[]) throws ParseException,IOException {
 	  Bela parser = new Bela(new FileInputStream(args[0]));
 	  parser.Bela();
  }

}

PARSER_END(Bela)

// Isso é pra ser ignorado (espaços em branco e tabs)
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  // Keywords
  <MAIN: "main">
  |<VAR: "var">
  |<IF: "if">
  |<THEN: "then">
  |<WHILE: "while">
  |<READ_INPUT: "readInput">
  |<RETURN: "return">
  |<PRINT: "printLn">
  |<TRUE: "true">
  |<FALSE: "false">
  |<FUNC_DECL: "fun">


  // Parênteses, chaves, ponto e vírgula etc
  |<SEMCOL: ";">
  |<APAR: "(">
  |<FPAR: ")">  
  |<ACHAVES: "{">
  |<FCHAVES: "}">
  |<COL: ",">

  // Operações
  |<OP_SUM: "+">
  |<OP_SUB: "-">
  |<OP_MULT: "*">
  |<OP_DIV: "/">
  |<OP_AND: "&&">
  |<OP_OR: "||">
  |<OP_LT: "<">
  |<OP_GT: ">">
  |<OP_EQ: "==">
  |<ATRIB: "=">

  // Tipos
  |<TYPE_FLOAT: "float">
  |<TYPE_BOOL: "bool">
  |<TYPE_VOID: "void">
  
}

TOKEN :
{
  <NUM : (["0"-"9"])+ ("." (["0"-"9"])+)? ("e" ("+" | "-")? (["0"-"9"])+)?>
  |< ID: ["a"-"z","A"-"Z"] (["a"-"z","A"-"Z","0"-"9"])* ("_" (["a"-"z","A"-"Z","0"-"9"])+)*>
  
}



void Bela () : {}
{
  <MAIN> <APAR> <FPAR> <ACHAVES> VarDecl() SeqComs() <FCHAVES>
}

void Tipo() : {}
{
  <TYPE_VOID> | <TYPE_FLOAT> | <TYPE_BOOL>
}

void VarDecl() : {}
{
  (<VAR> Tipo() <ID> <SEMCOL>)*
}

void SeqComs() : {}
{
  (Comando())*
}

void Comando() : {}
{
  <ID> <ATRIB> Exp() <SEMCOL>                                 // Atribuição
  | <ID> <APAR> (ListaExp())? <FPAR> <SEMCOL>                 // Chamada de função
  | <IF> Exp() <THEN> <ACHAVES> SeqComs() <FCHAVES> <SEMCOL>  // if-then
}

void Exp() : {}
{

}

void ListaExp() : {}
{

}